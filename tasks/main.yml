---
- block:
    - name: setup
      include_vars: "{{ item }}"
      with_items:
        - "{{ ansible_user_shell | basename }}.yml"
        - "{{ ansible_pkg_mgr }}.yml"
  rescue:
      # only include default when there isn't an "{{ ansible_pkg_mgr }}.yml"
    - name: setup
      include_vars: "default.yml"
  tags: always

#####=== install ===#####

- name: install | unarchive
  unarchive:
    src: "{{ fzf_tarball_binary_url }}"
    dest: "{{ fzf_install_prefix }}/bin"
    remote_src: yes
  become: "{{ ansible_pkg_mgr != 'homebrew' }}"
  when: fzf_use_pkg_mgr == false
  tags:
    - bootstrap
    - bootstrap_fzf
    - install
    - install_fzf

- name: install | package
  package:
    name: "{{ fzf_package_name }}"
    state: "{{ fzf_install_state }}"
  become: "{{ ansible_pkg_mgr != 'homebrew' }}"
  when: fzf_use_pkg_mgr == true
  tags:
    - bootstrap
    - bootstrap_fzf
    - install
    - install_fzf

#####=== configure ===#####

- block:
    - name: install | git
      git:
        repo: "{{ fzf_git_clone_url }}"
        dest: "{{ fzf_install_prefix }}"
        update: yes
      when: ansible_user_shell | match(".*\/(bash|zsh)")

    - name: bash/zsh | configure | shell initialization
      blockinfile:
        dest: "{{ fzf_shell_config_file }}"
        create: yes
        backup: no
        state: "{{ fzf_config_state }}"
        marker: "{{ fzf_config_marker }}"
        block: "{{ fzf_config_block }}"
      when: ansible_user_shell | match(".*\/(bash|zsh)")
  tags:
    - bootstrap
    - bootstrap_fzf
    - configure
    - configure_fzf
